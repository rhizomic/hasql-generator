{-# OPTIONS_GHC -Wno-unused-imports #-}

module SelectIdFromAddressesByUserIdAndCity
  (query)
where

import Contravariant.Extras (contrazip2)
import Control.Applicative ((<*>))
import Data.Bool (Bool (True))
import Data.ByteString (ByteString)
import Data.Either (Either (Right))
import Data.Function (($))
import Data.Functor ((<$>))
import Data.Maybe (Maybe)
import Data.Text (Text)
import Data.UUID (UUID)
import Data.Vector (Vector)
import Hasql.Decoders qualified as Decoders
import Hasql.Encoders qualified as Encoders
import Hasql.Statement (Statement (Statement))
import Hasql.Transaction (Transaction, statement)

query ::
  UUID ->
  Text ->
  Transaction (Vector UUID)
query a1 a2 =
  statement
   params
   (Statement sql encoder decoder True)

  where
    sql :: ByteString
    sql = "select id from addresses where user_id = $1 and city = $2;"

    params :: (UUID, Text)
    params = (a1, a2)

    encoder :: Encoders.Params (UUID, Text)
    encoder =
      contrazip2
        (Encoders.param $ Encoders.nonNullable Encoders.uuid)
        (Encoders.param $ Encoders.nonNullable Encoders.text)

    decoder :: Decoders.Result (Vector UUID)
    decoder =
      Decoders.rowVector $
        Decoders.column (Decoders.nonNullable Decoders.uuid)
