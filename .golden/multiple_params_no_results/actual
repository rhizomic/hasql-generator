{-# OPTIONS_GHC -Wno-unused-imports #-}

module DeleteFromAddressesByPostalCodeAndCountry
  (query)
where

import Contravariant.Extras (contrazip2)
import Control.Applicative ((<*>))
import Data.Bool (Bool (True))
import Data.ByteString (ByteString)
import Data.Function (($))
import Data.Functor ((<$>))
import Data.Maybe (Maybe)
import Data.Text (Text)
import Data.Vector (Vector)
import Hasql.Decoders qualified as Decoders
import Hasql.Encoders qualified as Encoders
import Hasql.Statement (Statement (Statement))
import Hasql.Transaction (Transaction, statement)

query ::
  Text ->
  Text ->
  Transaction ()
query a1 a2 =
  statement
   params
   (Statement sql encoder decoder True)

  where
    sql :: ByteString
    sql = "delete from addresses where postal_code = $1 and country = $2;"

    params :: (Text, Text)
    params = (a1, a2)

    encoder :: Encoders.Params (Text, Text)
    encoder =
      contrazip2
        (Encoders.param $ Encoders.nonNullable Encoders.text)
        (Encoders.param $ Encoders.nonNullable Encoders.text)

    decoder :: Decoders.Result ()
    decoder =
      Decoders.noResult
