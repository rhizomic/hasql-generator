module SelectIdPostalCodeAndCountryFromAddresses
  (query)
where

import Control.Applicative ((<*>))
import Data.Bool (Bool (True))
import Data.ByteString (ByteString)
import Data.Function (($))
import Data.Functor ((<$>))
import Data.Maybe (Maybe)
import Data.Text (Text)
import Data.UUID (UUID)
import Data.Vector (Vector)
import Hasql.Decoders qualified as Decoders
import Hasql.Encoders qualified as Encoders
import Hasql.Statement (Statement (Statement))
import Hasql.Transaction (Transaction, statement)

query ::
  Text ->
  Transaction (Vector (UUID, Text, Text))
query a1 =
  statement
   params
   (Statement sql encoder decoder True)

  where
    sql :: ByteString
    sql = "select id, postal_code, country from addresses where line_1 = $1;"

    params :: Text
    params = a1

    encoder :: Encoders.Params Text
    encoder =
      Encoders.param $ Encoders.nonNullable Encoders.text

    decoder :: Decoders.Result (Vector (UUID, Text, Text))
    decoder =
      Decoders.rowVector $
        (,,)
          <$> Decoders.column (Decoders.nonNullable Decoders.uuid)
          <*> Decoders.column (Decoders.nonNullable Decoders.text)
          <*> Decoders.column (Decoders.nonNullable Decoders.text)
