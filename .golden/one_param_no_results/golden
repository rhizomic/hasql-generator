{-# OPTIONS_GHC -Wno-unused-imports #-}

module UpdateAddresses
  (query)
where

import Control.Applicative ((<*>))
import Data.Bool (Bool (True))
import Data.ByteString (ByteString)
import Data.Either (Either (Right))
import Data.Function (($))
import Data.Functor ((<$>))
import Data.Maybe (Maybe)
import Data.UUID (UUID)
import Hasql.Decoders qualified as Decoders
import Hasql.Encoders qualified as Encoders
import Hasql.Statement (Statement (Statement))
import Hasql.Transaction (Transaction, statement)

query ::
  UUID ->
  Transaction ()
query a1 =
  statement
   params
   (Statement sql encoder decoder True)

  where
    sql :: ByteString
    sql = "update addresses set line_2 = null where id = $1;"

    params :: UUID
    params = a1

    encoder :: Encoders.Params UUID
    encoder =
      Encoders.param $ Encoders.nonNullable Encoders.uuid

    decoder :: Decoders.Result ()
    decoder =
      Decoders.noResult
